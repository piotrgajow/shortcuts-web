buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.11.6"
        classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"

        classpath 'com.bmuschko:gradle-clover-plugin:2.1.1'
    }
}

version "0.1"
group "shortcuts.backend"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"org.grails.grails-gsp"
apply plugin:"asset-pipeline"

apply plugin: 'codenarc'
apply plugin: 'com.bmuschko.clover'


repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-dependencies"
    compile "org.grails:grails-web-boot"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-core:5.1.3.Final"
    compile "org.hibernate:hibernate-ehcache:5.1.3.Final"
    compile "mysql:mysql-connector-java:5.1.37"
    compile 'org.grails.plugins:joda-time:2.0.0'
    console "org.grails:grails-console"
    profile "org.grails.profiles:web"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:2.11.6"
    runtime "com.h2database:h2"
    testCompile "org.grails:grails-plugin-testing"
    testCompile "org.grails.plugins:geb"
    testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
    testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"

    compile 'org.codehaus.groovy:groovy-all:2.4.7'
    clover 'org.openclover:clover:4.2.0'
}

bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always')
    addResources = true
}


assets {
    minifyJs = true
    minifyCss = true
}

codenarcMain {
    config = resources.text.fromFile('codenarc-ruleset.groovy')
    maxPriority1Violations = 0
    maxPriority2Violations = 0
    maxPriority3Violations = 0
}

codenarcTest {
    configFile = rootProject.file('codenarc-test.groovy')
    maxPriority1Violations = 0
    maxPriority2Violations = 0
    maxPriority3Violations = 0
}

//clover {
//    classesBackupDir = file("${sourceSets.main.output.classesDir}-backup")
//
//    testIncludes = ['**/*Test.java', '**/*Spec.groovy']
//
//    additionalSourceSet {
//        srcDirs = sourceSets.main.allSource.srcDirs
//        classesDir = sourceSets.main.output.classesDir
//    }
//
//    report {
//        html = true
//        xml = true
//        testResultsDir = project.tasks.getByName('test').reports.junitXml.destination
//        testResultsInclude = 'TEST-*.xml'
//    }
//
//
//}

clover {
    println sourceSets.main.allGroovy

    classesBackupDir = file("${sourceSets.main.output.classesDir}-backup")

    testIncludes = ['**/*Test.java', '**/*Spec.groovy']

    targetPercentage = '75%'

    additionalSourceSet {
        srcDirs = sourceSets.main.allGroovy.srcDirs
        classesDir = sourceSets.main.output.classesDir
    }
    additionalTestSourceSet {
        srcDirs = sourceSets.test.allGroovy.srcDirs
        classesDir = sourceSets.test.output.classesDir
    }

    compiler {
        encoding = 'UTF-8'

        // if the javac executable used by ant should be the same as the one used elsewhere.
        executable = file('/usr/local/java/jdk1.8.0_05')
    }

    contexts {
        statement {
            name = 'log'
            regexp = '^.*LOG\\..*'
        }

        method {
            name = 'main'
            regexp = 'public static void main\\(String args\\[\\]\\).*'
        }
        method {
            name = 'getters'
            regexp = 'public [^\\s]+ get[A-Z][^\\s]+\\(\\)'
            maxStatements = 1
        }
        method {
            name = 'setters'
            regexp = 'public void set[A-Z][^\\s]+\\(.+\\)'
            maxStatements = 1
        }
    }

    report {
        html = true
        pdf = true
        filter = 'log,main,getters,setters'

        // Support capturing test results from JUnix XML report
        testResultsDir = project.tasks.getByName('test').reports.junitXml.destination
        testResultsInclude = 'TEST-*.xml'

        // Clover history generation support
        // See Clover documentation for details of the values supported
        historical {
            enabled = true
            historyIncludes = 'clover-*.xml.gz'
            packageFilter = null
            from = null
            to = null

            added {
                range = 10
                interval = '3 weeks'
            }
            mover {
                threshold = 1
                range = 10
                interval = '3 weeks'
            }
            mover {
                threshold = 1
                range = 10
                interval = '3 months'
            }
            mover {
                threshold = 1
                range = 10
                interval = '1 year'
            }
        }
    }
}